
// https://www.geeksforgeeks.org/dsa/queue-linked-list-implementation/

// Front means first node
// Rear means last node

class Node<T: BinaryInteger> {
    var value: T
    var next: Node?

    init(value: T, next: Node? = nil) {
        self.value = value
        self.next = next
    }
}

class QueueUsingLinkedList<T: BinaryInteger> {
    var front: Node<T>?
    var rear: Node<T>?

    func enqueu(node: Node<T>?) {
        if front == nil {
            front = node
            rear = node
            return
        } else {
            rear?.next = node
            rear = node
        }
    }

    func dequeue() {
        if front == nil {
            return
        }

        if front === rear {
            front = nil
            rear = nil
        }

        front = front?.next
    }

    func printQueue() {
        var node = front
        while node != nil {
            print(node?.value)
            node = node?.next
        }
    }
}


let linedLstQueue = QueueUsingLinkedList<Int>()
linedLstQueue.enqueu(node: Node(value: 0))
linedLstQueue.enqueu(node: Node(value: 1))
linedLstQueue.enqueu(node: Node(value: 2))
print("11111")
linedLstQueue.printQueue()
linedLstQueue.dequeue()
